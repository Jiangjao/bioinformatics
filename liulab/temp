##leaf color
##leaf color, please use tab to separator items.
!groups	GROUP1,GROUP2,GROUP3,GROUP4,GROUP5
!colors	#ea9999,#6fa8dc,#d5a6bd,#ffe599,#0b5394
S113,S124	red	ad

##GROUP4 color
S79,S58	#ffe599	ad
S103,S49	#ffe599	ad
S95,S80	#ffe599	ad

##GROUP5 leaf color
S135,S12	#0b5394	ad

##GROUP2 leaft color
S161,S82	#6fa8dc	ad
S121,S115	#6fa8dc	ad
S120,S100	#6fa8dc	ad

##GROUP1 leaf color
S113,S124   #ea9999 ad

##GROUP3 leaf color
S76	#d5a6bd
S91,S109	#d5a6bd	ad
S106 #d5a6bd
S76 #d5a6bd
S97	#d5a6bd
S106	#d5a6bd



##S55,S114,S123,S164 Yunkang 10
##S83,S156 Baihaozao
##S58,S78 shuchazao
##S61,S155	Yusun
##S41,S147	Zijuan

Statistical Analyses that Can Handle Outliers
What do you do when you can’t legitimately remove outliers, but they violate the assumptions of your statistical analysis? You want to include them but don’t want them to distort the results. Fortunately, there are various statistical analyses up to the task. Here are several options you can try.

-   Nonparametric hypothesis tests are robust to outliers. For these alternatives to the more common parametric tests, outliers won’t necessarily violate their assumptions or distort their results.

-   In regression analysis, you can try transforming your data or using a robust regression analysis available in some statistical packages.

-   Finally, bootstrapping techniques use the sample data as they are and don’t make assumptions about distributions.

-   These types of analyses allow you to capture the full variability of your dataset without violating assumptions and skewing results.

$ git rm -r --cached superlists/__pycache__
rm 'superlists/__pycache__/__init__.cpython-36.pyc'
rm 'superlists/__pycache__/settings.cpython-36.pyc'
rm 'superlists/__pycache__/urls.cpython-36.pyc'
rm 'superlists/__pycache__/wsgi.cpython-36.pyc'
$ echo "__pycache__" >> .gitignore
$ echo "*.pyc" >> .gitignore

